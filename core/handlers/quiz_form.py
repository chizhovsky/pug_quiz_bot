from aiogram import Bot, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from core.keyboards.quiz_keyboard import quiz_keyboard
from core.utils.set_message_reaction import set_reaction
from core.utils.states_form import QuizForm

router = Router(name=__name__)

quiz_buttons = [
    ["–†–æ—Å—Å–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–ò—Ç–∞–ª–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è"],
    ["–Ø–ø–æ–Ω–∏—è", "–ö–∏—Ç–∞–π", "–ò–Ω–¥–∏—è", "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è"],
    ["–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–°–®–ê", "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", "–ö–∞–Ω–∞–¥–∞"],
    ["–ò—Ç–∞–ª–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è"],
    ["–ö–∞–Ω–∞–¥–∞", "–ú–∞–ª—å–¥–∏–≤—ã", "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è", "–ê–≤—Å—Ç—Ä–∞–ª–∏—è"],
    ["–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω", "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω"],
]
correct_answers = {0: "–ò—Ç–∞–ª–∏—è", 1: "–Ø–ø–æ–Ω–∏—è", 2: "–°–®–ê",
                   3: "–ò—Å–ø–∞–Ω–∏—è", 4: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", 5: "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω"}


@router.message(Command("quiz"))
async def get_quiz(message: Message, state: FSMContext):
    await message.answer(
        f"{message.from_user.first_name}, –Ω–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n"
        f"–í–æ–ø—Ä–æ—Å 1:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –†–∏–º?",
        reply_markup=quiz_keyboard(quiz_buttons[0]),
    )
    await state.set_state(QuizForm.SECOND_QUESTION)


@router.message(QuizForm.SECOND_QUESTION)
async def get_second_question(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(answer0=message.text)
    context_data = await state.get_data()
    if context_data.get("answer0") == correct_answers[0]:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    await message.answer(
        "–í–æ–ø—Ä–æ—Å 2:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –¢–æ–∫–∏–æ?",
        reply_markup=quiz_keyboard(quiz_buttons[1]),
    )
    await state.set_state(QuizForm.THIRD_QUESTION)


@router.message(QuizForm.THIRD_QUESTION)
async def get_third_question(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(answer1=message.text)
    context_data = await state.get_data()
    if context_data.get("answer1") == correct_answers[1]:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    await message.answer(
        "–í–æ–ø—Ä–æ—Å 3:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –í–∞—à–∏–Ω–≥—Ç–æ–Ω?",
        reply_markup=quiz_keyboard(quiz_buttons[2]),
    )
    await state.set_state(QuizForm.FOURTH_QUESTION)


@router.message(QuizForm.FOURTH_QUESTION)
async def get_fourth_question(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(answer2=message.text)
    context_data = await state.get_data()
    if context_data.get("answer2") == correct_answers[2]:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    await message.answer(
        "–í–æ–ø—Ä–æ—Å 4:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –ú–∞–¥—Ä–∏–¥?",
        reply_markup=quiz_keyboard(quiz_buttons[3]),
    )
    await state.set_state(QuizForm.FIFTH_QUESTION)


@router.message(QuizForm.FIFTH_QUESTION)
async def get_fifth_question(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(answer3=message.text)
    context_data = await state.get_data()
    if context_data.get("answer3") == correct_answers[3]:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    await message.answer(
        "–í–æ–ø—Ä–æ—Å 5:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –ö–∞–Ω–±–µ—Ä—Ä–∞?",
        reply_markup=quiz_keyboard(quiz_buttons[4]),
    )
    await state.set_state(QuizForm.SIXTH_QUESTION)


@router.message(QuizForm.SIXTH_QUESTION)
async def get_sixth_question(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(answer4=message.text)
    context_data = await state.get_data()
    if context_data.get("answer4") == correct_answers[4]:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    await message.answer(
        "–í–æ–ø—Ä–æ—Å 6:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –î—É—à–∞–Ω–±–µ?",
        reply_markup=quiz_keyboard(quiz_buttons[5]),
    )
    await state.set_state(QuizForm.RESULT)


@router.message(QuizForm.RESULT)
async def get_quiz_result(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(answer5=message.text)
    context_data = await state.get_data()
    if context_data.get("answer5") == correct_answers[5]:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    data_user = (
        f"–û—Ç–≤–µ—Ç 1: {context_data.get('answer0')}\r\n"
        f"–û—Ç–≤–µ—Ç 2: {context_data.get('answer1')}\r\n"
        f"–û—Ç–≤–µ—Ç 3: {context_data.get('answer2')}\r\n"
        f"–û—Ç–≤–µ—Ç 4: {context_data.get('answer3')}\r\n"
        f"–û—Ç–≤–µ—Ç 5: {context_data.get('answer4')}\r\n"
        f"–û—Ç–≤–µ—Ç 6: {context_data.get('answer5')}"
    )
    await message.answer(data_user)
    await state.clear()





"""async def handle_question_answer(message: Message, state: FSMContext, bot: Bot, answer_key: str, correct_answer: str, next_question_text: str, next_question_buttons: list[str]):
    await state.update_data(**{answer_key: message.text})
    context_data = await state.get_data()
    if context_data.get(answer_key) == correct_answer:
        await set_reaction(bot, message.chat.id, message.message_id, "üëç")
    else:
        await set_reaction(bot, message.chat.id, message.message_id, "üíî")
    await message.answer(
        next_question_text,
        reply_markup=quiz_keyboard(next_question_buttons),
    )
    await state.set_state(QuizForm.THIRD_QUESTION if answer_key == "answer0" else QuizForm.RESULT)


@router.message(QuizForm.SECOND_QUESTION)
async def get_second_question(message: Message, state: FSMContext, bot: Bot):
    await handle_question_answer(
        message, state, bot, "answer0", correct_answers[0],
        "–í–æ–ø—Ä–æ—Å 2:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –¢–æ–∫–∏–æ?",
        quiz_buttons[1]
    )


@router.message(QuizForm.THIRD_QUESTION)
async def get_third_question(message: Message, state: FSMContext, bot: Bot):
    await handle_question_answer(
        message, state, bot, "answer1", correct_answers[1],
        "–í–æ–ø—Ä–æ—Å 3:\n–°—Ç–æ–ª–∏—Ü–µ–π –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –í–∞—à–∏–Ω–≥—Ç–æ–Ω?",
        quiz_buttons[2]
    )"""

